const { read, solve, isSolved, prettyBoard } = require('../sudoku.js');

describe('read', () => {
  it('return first table', () => {
    expect(read(0)).toEqual([
      ['1', '-', '5', '8', '-', '2', '-', '-', '-'],
      ['-', '9', '-', '-', '7', '6', '4', '-', '5'],
      ['2', '-', '-', '4', '-', '-', '8', '1', '9'],
      ['-', '1', '9', '-', '-', '7', '3', '-', '6'],
      ['7', '6', '2', '-', '8', '3', '-', '9', '-'],
      ['-', '-', '-', '-', '6', '1', '-', '5', '-'],
      ['-', '-', '7', '6', '-', '-', '-', '3', '-'],
      ['4', '3', '-', '-', '2', '-', '5', '-', '1'],
      ['6', '-', '-', '3', '-', '8', '9', '-', '-'],
    ]);
  });
});
it('return last table', () => {
  expect(read(14)).toEqual([
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
  ]);
});
it('return table undefinded', () => {
  expect(read(20)).toEqual(undefined);
});

describe('solve', () => {
  it('return first table', () => {
    const table1 = [
      ['1', '-', '5', '8', '-', '2', '-', '-', '-'],
      ['-', '9', '-', '-', '7', '6', '4', '-', '5'],
      ['2', '-', '-', '4', '-', '-', '8', '1', '9'],
      ['-', '1', '9', '-', '-', '7', '3', '-', '6'],
      ['7', '6', '2', '-', '8', '3', '-', '9', '-'],
      ['-', '-', '-', '-', '6', '1', '-', '5', '-'],
      ['-', '-', '7', '6', '-', '-', '-', '3', '-'],
      ['4', '3', '-', '-', '2', '-', '5', '-', '1'],
      ['6', '-', '-', '3', '-', '8', '9', '-', '-'],
    ];
    expect(solve(table1)).toEqual([
      ['1', '4', '5', '8', '9', '2', '6', '7', '3'],
      ['8', '9', '3', '1', '7', '6', '4', '2', '5'],
      ['2', '7', '6', '4', '3', '5', '8', '1', '9'],
      ['5', '1', '9', '2', '4', '7', '3', '8', '6'],
      ['7', '6', '2', '5', '8', '3', '1', '9', '4'],
      ['3', '8', '4', '9', '6', '1', '7', '5', '2'],
      ['9', '5', '7', '6', '1', '4', '2', '3', '8'],
      ['4', '3', '8', '7', '2', '9', '5', '6', '1'],
      ['6', '2', '1', '3', '5', '8', '9', '4', '7'],
    ]);
  });
});
it('return last table', () => {
  const table = [
    ['1', '4', '-', '-', '5', '-', '-', '-', '-'],
    ['6', '-', '-', '1', '9', '5', '-', '-', '-'],
    ['-', '9', '8', '-', '-', '-', '-', '6', '-'],
    ['9', '-', '-', '-', '6', '-', '-', '-', '3'],
    ['3', '-', '-', '8', '-', '3', '-', '-', '1'],
    ['7', '-', '-', '-', '2', '-', '-', '-', '6'],
    ['-', '5', '-', '-', '-', '-', '2', '8', '-'],
    ['-', '-', '-', '3', '1', '9', '-', '-', '5'],
    ['-', '-', '-', '-', '8', '-', '-', '5', '2'],
  ];
  expect(solve(table)).toBe(false);
});

describe('isSolved', () => {
  it('return first table', () => {
    const table1 = [
      ['1', '4', '5', '8', '9', '2', '6', '7', '3'],
      ['8', '9', '3', '1', '7', '6', '4', '2', '5'],
      ['2', '7', '6', '4', '3', '5', '8', '1', '9'],
      ['5', '1', '9', '2', '4', '7', '3', '8', '6'],
      ['7', '6', '2', '5', '8', '3', '1', '9', '4'],
      ['3', '8', '4', '9', '6', '1', '7', '5', '2'],
      ['9', '5', '7', '6', '1', '4', '2', '3', '8'],
      ['4', '3', '8', '7', '2', '9', '5', '6', '1'],
      ['6', '2', '1', '3', '5', '8', '9', '4', '7'],
    ];
    expect(isSolved(table1)).toEqual(true);
  });
});
it('return last table', () => {
  const table = [
    ['1', '4', '-', '-', '5', '-', '-', '-', '-'],
    ['6', '-', '-', '1', '9', '5', '-', '-', '-'],
    ['-', '9', '8', '-', '-', '-', '-', '6', '-'],
    ['9', '-', '-', '-', '6', '-', '-', '-', '3'],
    ['3', '-', '-', '8', '-', '3', '-', '-', '1'],
    ['7', '-', '-', '-', '2', '-', '-', '-', '6'],
    ['-', '5', '-', '-', '-', '-', '2', '8', '-'],
    ['-', '-', '-', '3', '1', '9', '-', '-', '5'],
    ['-', '-', '-', '-', '8', '-', '-', '5', '2'],
  ];
  expect(isSolved(table)).toBe(false);
});

describe('prettyBoard', () => {
  test('prettyBoard выводит что-то в консоль', () => {
    // Сохраняем оригинальный console.log
    const originalLog = console.log;
    // Переменная для проверки вызова
    let wasCalled = false;
    // Подменяем console.log
    console.log = () => {
      wasCalled = true;
    };
    // Создаём простую доску 9x9
    const board = Array(9)
      .fill(null)
      .map(() => Array(9).fill('1'));
    // Вызываем функцию
    prettyBoard(board);
    // Проверяем, что console.log действительно вызывался
    expect(wasCalled).toBe(true);
    // Восстанавливаем оригинальный console.log
    console.log = originalLog;
  });
});
